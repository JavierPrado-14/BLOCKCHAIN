#!/usr/bin/env python3
"""
Script mejorado para iniciar el Dashboard de Corda con Gemini AI
Incluye verificaciones de dependencias y configuraci√≥n
"""

import sys
import subprocess
import os

def check_dependencies():
    """Verificar que todas las dependencias est√©n instaladas"""
    print("=" * 70)
    print("üîç VERIFICANDO DEPENDENCIAS")
    print("=" * 70)
    print()
    
    required_packages = [
        'streamlit',
        'pandas',
        'plotly',
        'psycopg2',
        'sklearn',
        'google.generativeai'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sklearn':
                __import__('sklearn')
            elif package == 'google.generativeai':
                __import__('google.generativeai')
            else:
                __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - NO INSTALADO")
            missing_packages.append(package)
    
    print()
    
    if missing_packages:
        print("‚ö†Ô∏è  Faltan dependencias. Instalando...")
        print()
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print()
    else:
        print("‚ú® Todas las dependencias est√°n instaladas")
    
    print()

def check_database_connection():
    """Verificar conexi√≥n a la base de datos"""
    print("=" * 70)
    print("üóÑÔ∏è  VERIFICANDO CONEXI√ìN A BASE DE DATOS")
    print("=" * 70)
    print()
    
    try:
        import psycopg2
        
        db_config = {
            'host': 'dpg-d3hk1u33fgac739s7s9g-a.oregon-postgres.render.com',
            'port': 5432,
            'database': 'blokchain_bd',
            'user': 'blokchain_bd_user',
            'password': 'RlxkDsSrWcte8ASrxsztagJWod7qNrWP'
        }
        
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM corda_transactions")
        count = cursor.fetchone()[0]
        conn.close()
        
        print(f"   ‚úÖ Conexi√≥n exitosa")
        print(f"   üìä {count} transacciones disponibles")
        print()
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {str(e)}")
        print()
        return False

def check_gemini_api():
    """Verificar configuraci√≥n de Gemini AI"""
    print("=" * 70)
    print("ü§ñ VERIFICANDO GEMINI AI")
    print("=" * 70)
    print()
    
    try:
        import google.generativeai as genai
        
        GEMINI_API_KEY = "AIzaSyBM5jwwPLcn9aldmaypSP-ywvqecVfJEIA"
        genai.configure(api_key=GEMINI_API_KEY)
        
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        print(f"   ‚úÖ API configurada correctamente")
        print(f"   üß† Modelo: gemini-2.5-flash")
        print()
        return True
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Advertencia: {str(e)}")
        print(f"   ‚ÑπÔ∏è  El dashboard funcionar√° pero sin an√°lisis de IA")
        print()
        return False

def show_dashboard_info():
    """Mostrar informaci√≥n sobre las funcionalidades del dashboard"""
    print()
    print("=" * 70)
    print("‚ú® NUEVAS FUNCIONALIDADES DEL DASHBOARD")
    print("=" * 70)
    print()
    print("üîÑ ACTUALIZACI√ìN DE DATOS:")
    print("   ‚Ä¢ Bot√≥n en la esquina superior derecha")
    print("   ‚Ä¢ Refresca datos desde PostgreSQL en tiempo real")
    print("   ‚Ä¢ Muestra timestamp de √∫ltima actualizaci√≥n")
    print()
    print("üß† AN√ÅLISIS CON IA GENERATIVA (GEMINI):")
    print("   ‚Ä¢ Bot√≥n 'Generar An√°lisis IA'")
    print("   ‚Ä¢ An√°lisis autom√°tico de patrones y tendencias")
    print("   ‚Ä¢ Detecci√≥n de anomal√≠as inteligente")
    print("   ‚Ä¢ Recomendaciones basadas en datos")
    print("   ‚Ä¢ Predicciones sobre comportamiento futuro")
    print()
    print("üìä AN√ÅLISIS TRADICIONALES:")
    print("   ‚Ä¢ Series temporales")
    print("   ‚Ä¢ Distribuci√≥n por moneda y estado")
    print("   ‚Ä¢ Machine Learning (anomal√≠as y clustering)")
    print("   ‚Ä¢ Filtros interactivos avanzados")
    print()
    print("=" * 70)
    print()

def start_dashboard():
    """Iniciar el dashboard"""
    print("üöÄ INICIANDO DASHBOARD DE CORDA CON GEMINI AI")
    print("=" * 70)
    print()
    print("üìç El dashboard se abrir√° en tu navegador predeterminado")
    print("üåê URL: http://localhost:8501")
    print()
    print("‚ö†Ô∏è  Para detener el servidor, presiona Ctrl+C")
    print("=" * 70)
    print()
    
    # Iniciar Streamlit
    subprocess.run([sys.executable, '-m', 'streamlit', 'run', 'corda_dashboard.py'])

def main():
    """Funci√≥n principal"""
    print()
    print("‚ïî" + "=" * 68 + "‚ïó")
    print("‚ïë" + " " * 68 + "‚ïë")
    print("‚ïë" + "  üîó DASHBOARD CORDA BLOCKCHAIN CON GEMINI AI  ".center(68) + "‚ïë")
    print("‚ïë" + " " * 68 + "‚ïë")
    print("‚ïö" + "=" * 68 + "‚ïù")
    print()
    
    # Verificaciones
    check_dependencies()
    db_connected = check_database_connection()
    gemini_connected = check_gemini_api()
    
    if not db_connected:
        print("‚ö†Ô∏è  ADVERTENCIA: No se pudo conectar a la base de datos")
        print("   El dashboard se iniciar√° pero puede no mostrar datos")
        print()
    
    # Mostrar informaci√≥n
    show_dashboard_info()
    
    # Preguntar si desea continuar
    print("¬øDeseas iniciar el dashboard? (S/n): ", end='')
    response = input().strip().lower()
    
    if response in ['', 's', 'si', 'y', 'yes']:
        print()
        start_dashboard()
    else:
        print()
        print("‚úã Inicio cancelado")
        print()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
        print()
        print("üëã Dashboard cerrado correctamente")
        print()
        sys.exit(0)

